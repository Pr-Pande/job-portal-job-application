// Code generated by MockGen. DO NOT EDIT.
// Source: serviceInterface.go
//
// Generated by this command:
//
//	mockgen -source serviceInterface.go -destination mockFile/serviceInterface_mock.go -package services
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "job-portal-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetAllCompanyData mocks base method.
func (m *MockUserService) GetAllCompanyData(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyData", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanyData indicates an expected call of GetAllCompanyData.
func (mr *MockUserServiceMockRecorder) GetAllCompanyData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyData", reflect.TypeOf((*MockUserService)(nil).GetAllCompanyData), ctx)
}

// GetAllJobData mocks base method.
func (m *MockUserService) GetAllJobData(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobData", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobData indicates an expected call of GetAllJobData.
func (mr *MockUserServiceMockRecorder) GetAllJobData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobData", reflect.TypeOf((*MockUserService)(nil).GetAllJobData), ctx)
}

// GetCompanyData mocks base method.
func (m *MockUserService) GetCompanyData(ctx context.Context, companyId uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyData", ctx, companyId)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyData indicates an expected call of GetCompanyData.
func (mr *MockUserServiceMockRecorder) GetCompanyData(ctx, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyData", reflect.TypeOf((*MockUserService)(nil).GetCompanyData), ctx, companyId)
}

// GetJobByCompany mocks base method.
func (m *MockUserService) GetJobByCompany(ctx context.Context, companyId uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByCompany", ctx, companyId)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByCompany indicates an expected call of GetJobByCompany.
func (mr *MockUserServiceMockRecorder) GetJobByCompany(ctx, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByCompany", reflect.TypeOf((*MockUserService)(nil).GetJobByCompany), ctx, companyId)
}

// GetJobData mocks base method.
func (m *MockUserService) GetJobData(ctx context.Context, jobId uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobData", ctx, jobId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobData indicates an expected call of GetJobData.
func (mr *MockUserServiceMockRecorder) GetJobData(ctx, jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobData", reflect.TypeOf((*MockUserService)(nil).GetJobData), ctx, jobId)
}

// ProcessJobApplication mocks base method.
func (m *MockUserService) ProcessJobApplication(ctx context.Context, applicationData []models.UserApplication) ([]models.ApplRespo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJobApplication", ctx, applicationData)
	ret0, _ := ret[0].([]models.ApplRespo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessJobApplication indicates an expected call of ProcessJobApplication.
func (mr *MockUserServiceMockRecorder) ProcessJobApplication(ctx, applicationData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJobApplication", reflect.TypeOf((*MockUserService)(nil).ProcessJobApplication), ctx, applicationData)
}

// StoreCompany mocks base method.
func (m *MockUserService) StoreCompany(ctx context.Context, companyData models.NewCompany) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCompany", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCompany indicates an expected call of StoreCompany.
func (mr *MockUserServiceMockRecorder) StoreCompany(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCompany", reflect.TypeOf((*MockUserService)(nil).StoreCompany), ctx, companyData)
}

// StoreJob mocks base method.
func (m *MockUserService) StoreJob(ctx context.Context, newJob models.NewJob, companyId uint64) (models.JobRespo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreJob", ctx, newJob, companyId)
	ret0, _ := ret[0].(models.JobRespo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreJob indicates an expected call of StoreJob.
func (mr *MockUserServiceMockRecorder) StoreJob(ctx, newJob, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreJob", reflect.TypeOf((*MockUserService)(nil).StoreJob), ctx, newJob, companyId)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(ctx context.Context, userData models.NewUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), ctx, userData)
}

// UserSignup mocks base method.
func (m *MockUserService) UserSignup(ctx context.Context, newUser models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, newUser)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserServiceMockRecorder) UserSignup(ctx, newUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserService)(nil).UserSignup), ctx, newUser)
}
